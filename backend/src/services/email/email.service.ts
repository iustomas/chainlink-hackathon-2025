// resend
import { Resend } from "resend";

// types
import {
  EmailServiceConfig,
  EscalationEmailData,
  EmailServiceResponse,
} from "./types/email.types.js";

// Email service manager
class EmailServiceManager {
  private resend: Resend;
  private config: EmailServiceConfig;

  constructor(config: EmailServiceConfig) {
    this.config = config;
    this.resend = new Resend(config.apiKey);
  }

  /**
   * Send escalation email to Eugenio when Tomas needs help
   * @param data - Escalation email data
   * @returns Promise<EmailServiceResponse>
   */
  async sendEscalationEmail(
    data: EscalationEmailData
  ): Promise<EmailServiceResponse> {
    try {
      const { data: emailData, error } = await this.resend.emails.send({
        from: this.config.fromEmail,
        to: [this.config.toEmail],
        subject: `üö® I (Tomas) need help - Case ${data.caseId}`,
        html: this.generateEscalationEmailHTML(data),
        text: this.generateEscalationEmailText(data),
      });

      if (error) {
        console.error("Resend API error:", error);
        return {
          success: false,
          error: `Email service error: ${error.message}`,
        };
      }

      return {
        success: true,
        messageId: emailData?.id,
      };
    } catch (error) {
      console.error("Error sending escalation email:", error);
      return {
        success: false,
        error:
          error instanceof Error ? error.message : "Unknown error occurred",
      };
    }
  }

  /**
   * Generate HTML content for escalation email
   * @param data - Escalation email data
   * @returns string - HTML content
   */
  private generateEscalationEmailHTML(data: EscalationEmailData): string {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>I (Tomas) need help</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
          .alert { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
          .details { background-color: #f8f9fa; padding: 15px; border-radius: 5px; }
          .label { font-weight: bold; color: #495057; }
          .value { margin-bottom: 10px; }
        </style>
      </head>

      <body>
        <div class="container">
          <div class="header">
            <h1>üö® I (Tomas) need help</h1>
            <p>Hello Eugenio, I have requested your assistance for a legal case.</p>
          </div>
          
          <div class="alert">
            <strong>‚ö†Ô∏è Escalaci√≥n requerida</strong>
            <p>I (Tomas) have determined that this case requires the intervention of a human lawyer.</p>
          </div>
          
          <div class="details">
            <div class="value">
              <span class="label">Case ID:</span> ${data.caseId}
            </div>
            <div class="value">
              <span class="label">Escalation ID:</span> ${data.escalationId}
            </div>
            <div class="value">
              <span class="label">Date and Time:</span> ${new Date(data.timestamp).toLocaleString("es-ES")}
            </div>            
          </div>
          
          <p style="margin-top: 20px; font-size: 14px; color: #6c757d;">
            This is an automatic message generated by Tomas.
          </p>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * Generate plain text content for escalation email
   * @param data - Escalation email data
   * @returns string - Plain text content
   */
  private generateEscalationEmailText(data: EscalationEmailData): string {
    return `
        üö® I (Tomas) need help.

        Hello Eugenio,

        I have requested your assistance for a legal case that requires the intervention of a human lawyer.

        CASE DETAILS:
        - Case ID: ${data.caseId}
        - Escalation ID: ${data.escalationId}
        - Date and Time: ${new Date(data.timestamp).toLocaleString("es-ES")}

        Please review this case and take the necessary actions.

        ---
        This is an automatic message generated by the Tomas.
            `.trim();
  }
}

// Create and export email service manager instance with lazy initialization
let emailServiceManagerInstance: EmailServiceManager | null = null;

const getEmailServiceManager = (): EmailServiceManager => {
  if (!emailServiceManagerInstance) {
    const apiKey = process.env.RESEND_API_KEY;
    if (!apiKey) {
      throw new Error("RESEND_API_KEY environment variable is not set");
    }

    emailServiceManagerInstance = new EmailServiceManager({
      apiKey,
      fromEmail: "tomas@cristianvaldivia.cl",
      toEmail: "eugenio@iustomas.ai",
    });
  }
  return emailServiceManagerInstance;
};

export { getEmailServiceManager };
